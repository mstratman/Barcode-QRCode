use Test::More;
use Barcode::QRCode;
use strict;

# Compare some outputs of this library to that of the PHP and JS libraries.

my $qr = Barcode::QRCode->new(
    data => 'abc',
    version_number => 1,
    correction_level => 'L',
);
my $barcode = $qr->barcode;

# Gotten from the php library:
is_deeply(
    $qr->barcode,
    abc_v1_L_from_PHP(),
    "abc, version 1, L correction - compared to PHP output"
);


# tested this once, but it's static so we don't need to keep testing it.
if (0) {
    is_deeply(
        abc_v1_L_from_JS(),
        abc_v1_L_from_PHP(),
        "abc, version 1, L correction - JS vs PHP output"
    );
}

# These *_from_JS() and *_from_PHP values were pulled from some sample
# scripts that use the (presumed-working) qrcode.php and qrcode.js 
# libraries.

sub abc_v1_L_from_JS {
    return [ [ 1,1,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1, ],[ 1,0,0,0,0,0,1,0,1,1,1,0,1,0,1,0,0,0,0,0,1, ],[ 1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1, ],[ 1,0,1,1,1,0,1,0,1,1,0,0,1,0,1,0,1,1,1,0,1, ],[ 1,0,1,1,1,0,1,0,0,1,0,0,1,0,1,0,1,1,1,0,1, ],[ 1,0,0,0,0,0,1,0,1,0,0,1,0,0,1,0,0,0,0,0,1, ],[ 1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1, ],[ 0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0, ],[ 1,1,1,1,1,0,1,1,1,0,0,1,0,1,0,1,0,1,0,1,0, ],[ 0,0,1,1,0,1,0,0,0,1,1,1,1,1,1,0,0,0,1,0,1, ],[ 1,1,0,0,1,1,1,0,1,0,1,0,1,0,1,1,0,0,0,1,0, ],[ 1,1,1,1,0,1,0,1,1,0,0,1,1,1,1,0,0,1,1,1,0, ],[ 1,1,0,1,0,1,1,1,0,1,1,0,1,0,0,1,0,0,0,0,0, ],[ 0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,1,0,0,1,0,1, ],[ 1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,0,1,1,0,1,0, ],[ 1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,1,0,1,1,1, ],[ 1,0,1,1,1,0,1,0,1,1,0,1,0,1,0,0,1,0,1,0,0, ],[ 1,0,1,1,1,0,1,0,1,1,0,1,1,1,1,0,0,1,0,0,0, ],[ 1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,1,0,0,0,0,0, ],[ 1,0,0,0,0,0,1,0,1,0,1,1,1,1,1,0,0,1,0,0,0, ],[ 1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,1,0,0,1,1,0, ], ];
}
sub abc_v1_L_from_PHP {
    return [ [ 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,  ],[ 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1,  ],[ 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1,  ],[ 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1,  ],[ 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1,  ],[ 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1,  ],[ 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1,  ],[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  ],[ 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,  ],[ 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1,  ],[ 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0,  ],[ 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0,  ],[ 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,  ],[ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1,  ],[ 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0,  ],[ 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1,  ],[ 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0,  ],[ 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0,  ],[ 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0,  ],[ 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0,  ],[ 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0,  ], ];
}

done_testing;
